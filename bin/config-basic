#!/usr/bin/env php
<?php

$autoloadFiles = array(__DIR__ . '/../vendor/autoload.php',
                       __DIR__ . '/../../../autoload.php');

foreach($autoloadFiles as $autoloadFile)
    if(file_exists($autoloadFile))
        require_once $autoloadFile;

Strukt\Fs::mkdir("cfg");
Strukt\Fs::mkdir("tpl/sgf/cfg");
Strukt\Fs::mkdir("tpl/sgf/app/src/App/AuthModule/Controller");
Strukt\Fs::mkdir("tpl/sgf/app/src/App/AuthModule/Form");
Strukt\Fs::mkdir("tpl/sgf/app/src/App/AuthModule/Router");
Strukt\Fs::mkdir("tpl/sgf/app/src/App/AuthModule/Tests");
Strukt\Fs::mkdir("tpl/sgf/lib/App");

Strukt\Fs::touchWrite("cfg/module.ini",
'[folders]
folder["ctr"] = "Controller"
folder["rtr"] = "Router"
folder["frm"] = "Form"
folder["tes"] = "Tests"
; folder["fix"] = "Fixture"
; folder["rep"] = "Repository"
; folder["sdr"] = "Seeder"');

Strukt\Fs::touchWrite("tpl/sgf/cfg/app.sgf",
"app-name = {{app}}
");

Strukt\Fs::touchWrite("tpl/sgf/app/src/App/AuthModule/Controller/User.sgf","<?php
namespace {{app}}\AuthModule\Controller;

class User extends \Strukt\Contract\Controller{

	public function find(\$id){

		return \"Couldn't find User:[id] - AuthModule\Controller\User::find Not Yet Implemented!\";
	}

	public function getAll(){

		return \"AuthModule\Controller\User::getAll Not Yet Implemented!\";
	}

	public function doAuthentication(\$username, \$password){

		\$user = \$this->get(\"User\", array(\$username, \$password));

		return \$user->getUsername() == \"admin\" && \$user->getPassword() == sha1(\"p@55w0rd\");
	}
}");

Strukt\Fs::touchWrite("tpl/sgf/app/src/App/AuthModule/Form/User.sgf","<?php
namespace {{app}}\AuthModule\Form;

class User extends \Strukt\Contract\Form{

	protected function validation(){

		\$service = \$this->getValidatorService();

		\$this->setMessage(\"username\", \$service->getNew(\$this->get(\"username\"))->isNotEmpty());
		\$this->setMessage(\"password\", \$service->getNew(\$this->get(\"password\"))->isNotEmpty());
	}
}");

Strukt\Fs::touchWrite("tpl/sgf/app/src/App/User.sgf","<?php
namespace {{app}};

class User{

	private \$id;
	private \$username;
	private \$password;

	public function __construct(\$username, \$password){

		\$this->username = \$username;
		\$this->password = sha1(\$password);
	}

	public function getId(){

		return \$this->id;
	}

	public function setId(\$id){
		
		\$this->id = \$id;
	}

	public function getUsername(){
		
		return \$this->username;
	}

	public function setUsername(\$username){
		
		\$this->username = \$username;
	}

	public function getPassword(){
		
		return \$this->password;
	}

	public function setPassword(\$password){
		
		\$this->password = sha1(\$password);
	}
}");

Strukt\Fs::touchWrite("tpl/sgf/app/src/App/AuthModule/Router/Auth.sgf","<?php
namespace {{app}}\AuthModule\Router;

use Strukt\Http\Request;
use Strukt\Http\Response;

class Auth extends \Strukt\Contract\Router{

	/**
	* @Route:/login
	* @Method:POST
	*/
	public function login(Request \$request){

		\$username = \$request->get(\"username\");
		\$password = \$request->get(\"password\");

		\$userForm = \$this->get(\"au.frm.User\", [\$request]);
		\$messages = \$userForm->validate();

		if(\$messages[\"is_valid\"])
		    if(\$this->get(\"au.ctr.User\")->doAuthentication(\$username, \$password))
		       return self::json(array(

		            \"success\"=>true, 
		            \"message\"=>\"User successfully authenticated.\"
		        ));
		    else 
		        return self::json(array(

		            \"success\"=>false,
		            \"message\"=>\"Failed to authenticate user!\"
		        ));
		else
		    return self::json(array(

		        \"success\"=>false,
		        \"message\"=>\"Invalid input!\",
		        \"form\"=>\$messages,
		    ));
	}
}");


Strukt\Fs::touchWrite("tpl/sgf/app/src/App/AuthModule/Router/Index.sgf","<?php
namespace {{app}}\AuthModule\Router;

use Strukt\Http\Request;
use Strukt\Http\Response;

class Index extends \Strukt\Contract\Router{

	/**
	* @Route:/
	* @Method:GET
	*/
	public function welcome(){
		
		return \"</b>Strukt Works!<b>\";
	}

	/**
	* @Route:/hello/world
	* @Method:GET
	*/
	public function helloWorld(){

		return self::htmlfile(\"public/static/index.html\");
	}
	
	/**
	* @Route:/hello/{name:alpha}
	* @Method:GET
	*/
	public function helloTo(\$name, Request \$request){

		return sprintf(\"<b>Hello %s!</b>\", \$name);	
	}

	/**
	* @Route:/users/all
	* @Permission:user_all
	* @Method:GET
	*/
	public function getAllUsers(){
		
		return \$this->get(\"au.ctr.User\")->getAll();
	}

	/**
	* @Route:/user
	* @Method:GET
	*/
	public function getUser(Request \$request){

		\$id = \$request->query->get(\"id\");

		return \$this->get(\"au.ctr.User\")->find(\$id);
	}

	/**
	* @Route:/test
	* @Method:GET
	*/
	public function testException(){

		throw new \Exception(\"Whoops!\");
	}	
}");

Strukt\Fs::touchWrite("tpl/sgf/app/src/App/AuthModule/_AuthModule.sgf","<?php
namespace {{app}}\AuthModule;

class {{app}}AuthModule extends \Strukt\Contract\Module{

	protected \$alias=\"Au\";
}
");

Strukt\Fs::touchWrite("tpl/sgf/lib/App/Loader.sgf","<?php
namespace App;

use Strukt\Router\Kernel as RouterKernel;

/**
*	Application Loader Class
*
*	WARNING: THIS FILE IS AUTO-GENERATED. 
*			   DO NOT ADD ANYTHING BECAUSE 
*			   IT WILL BE OVERWRITTEN
*
*	@author Moderator <pitsolu@gmail.com>
*/
class Loader{

	private \$app;

	/**
	* Constructor
	*	
	* Initialize Strukt Framework
	*/
	public function __construct(RouterKernel \$router=null){

		\$this->app = new \Strukt\Application(\$router);
		{{packages}}
	}

	/**
	* Getter for Strukt Application
	*/
	public function getApp():\Strukt\Application{

		return \$this->app;
	}
}");

Strukt\Fs::touchWrite("tpl/sgf/app/src/App/AuthModule/Tests/UserTest.sgf","<?php
namespace {{app}}\AuthModule\Tests;

use Strukt\Core\Registry;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase{

	public function setUp(){
	
		\$this->core = Registry::getInstance()->get(\"core\");
	}

	public function testDoAuthentication(){

		\$username = \"admin\";
		\$password = \"p@55w0rd\";

		\$isSuccess = \$this->core->get(\"au.ctr.User\")->doAuthentication(\$username, \$password);

		\$this->assertTrue(\$isSuccess);
	}
}");