#!/usr/bin/env php
<?php

$autoloadFiles = array(__DIR__ . '/../vendor/autoload.php',
                       __DIR__ . '/../../../autoload.php');

foreach($autoloadFiles as $autoloadFile)
    if(file_exists($autoloadFile))
        require_once $autoloadFile;

Strukt\Fs::mkdir("tpl/sgf");

Strukt\Fs::touchWrite("tpl/sgf/bootstrap.sgf",'<?php

error_reporting(E_ALL & ~E_DEPRECATED & ~E_STRICT & ~E_WARNING);

$cfg_app = parse_ini_file("cfg/app.ini");

$loader = require \'vendor/autoload.php\';
$loader->add(\'App\', __DIR__.\'/lib/\');
$loader->add(\'Strukt\', __DIR__.\'/src/\');
{{if pkg_do}}
$loader->add(\'Seed\', __DIR__.\'/database/seeder/\');
{{/if}}
$loader->add($cfg_app["app-name"], __DIR__.\'/app/src/\');');

Strukt\Fs::touchWrite("tpl/sgf/console.sgf",'#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Http\Request;
use Strukt\Core\Registry;
use Strukt\Console;
use Strukt\Router\Kernel as RouterKernel;
use Strukt\Router\Middleware\Router as RouterMiddleware;
use Strukt\Framework\Provider\Router as RouterProvider;
use Strukt\Framework\Provider\Annotation as AnnotationProvider;
use App\Loader as AppLoader;

{{if pkg_do}}
use App\Provider\EntityManager as EntityManagerProvider;
use App\Provider\EntityManagerAdapter as EntityManagerAdapterProvider;
use App\Provider\Normalizer as NormalizerProvider;
use App\Provider\Logger as LoggerProvider;
use App\Command\Doctrine\GenerateModels as GenerateModelsCommand;
use App\Command\Doctrine\Migration\GenerateMigration as GenerateMigrationCommand;
use App\Command\Doctrine\Seeder\GenerateSeeder as GenerateSeederCommand;
use App\Command\Doctrine\Migration\MigrateExec as MigrateExecCommand;
use App\Command\Doctrine\Seeder\SeederExec as SeederExecCommand;
use App\Command\Doctrine\SqlExec as SqlExecCommand;
use Cobaia\Doctrine\MonologSQLLogger;
{{/if}}

{{if pkg_roles}}
use {{app}}\AuthModule\Command\PermissionAdd as PermissionAddCommand;
use {{app}}\AuthModule\Command\RoleAdd as RoleAddCommand;
use {{app}}\AuthModule\Command\RoleAddPermission as RoleAddPermissionCommand;
use {{app}}\AuthModule\Command\UserAdd as UserAddCommand;
use {{app}}\AuthModule\Command\UserDumpCredentials as UserDumpCredentialsCommand;
use {{app}}\AuthModule\Command\UserResetPassword as UserResetPasswordCommand;
{{/if}}

{{if pkg_books}}
use {{app}}\AccountsModule\Command\BooksShell as BooksShellCommand;
{{/if}}

require "bootstrap.php";

Env::set("root_dir", getcwd());
Env::set("rel_appsrc_dir", "app/src/");
Env::set("rel_app_ini", "cfg/app.ini");
Env::set("rel_mod_ini", "cfg/module.ini");
Env::set("rel_tplapp_dir", "tpl/sgf/app/");
Env::set("rel_tplappsrc_dir", "tpl/sgf/app/src/");
Env::set("rel_tplauthmod_dir","tpl/sgf/app/src/App/AuthModule/");
Env::set("rel_app_lib", "lib/App");
Env::set("rel_loader_sgf","tpl/sgf/lib/App/Loader.sgf");

{{if pkg_do}}
Env::set("is_dev", true);
Env::set("rel_db_ini", "cfg/db.ini");
Env::set("migration_sgf","tpl/sgf/database/schema/Schema/Migration/Version_.sgf");
Env::set("migration_home","database/schema/Schema/Migration");
Env::set("migration_ns", Schema\Migration::class);
Env::set("entity_ns", App\Contract\Entity::class);
Env::set("seeder_sgf", "tpl/sgf/database/seeder/Seed/NameVer.sgf");
Env::set("seeder_dir", "database/seeder/Seed");
Env::set("seeder_home", "database/seeder");
Env::set("logger_name", "Console Logger");
Env::set("logger_file", "logs/console.log");
{{/if}}

$kernel = new RouterKernel(Request::createFromGlobals());
{{if pkg_do}}
$kernel->inject("app.dep.logger.sqllogger", function(){

	return new MonologSQLLogger(null, null, __DIR__ . \'/logs/\');
});
{{/if}}

$kernel->providers(array(

	{{if pkg_do}}
	LoggerProvider::class,
	EntityManagerProvider::class,
	EntityManagerAdapterProvider::class,
	NormalizerProvider::class,
	{{/if}}
	RouterProvider::class,
	AnnotationProvider::class
));

$kernel->middlewares(array(
	
	"router" => new RouterMiddleware,
));

try{
	
	if(!class_exists(AppLoader::class))
		throw new Exception(sprintf("%s does not exixst!", AppLoader::class));
	
	$loader = new AppLoader($kernel);
	$app = $loader->getApp();

	$moduleList = $app->getModuleList();

	$app->initialize();	
}
catch(\Exception $e){

	$moduleList = null;
}

{{if pkg_strukt}}
$configs = array(

	"labelStruktSect"=>true, 
	"moduleList"=>$moduleList,
);
{{/if}}

{{if pkg_do}}
$configs = array(

	"labelStruktSect"=>true, 
	// "loadNativeCmds"=>true,
	"appName"=>"Strukt Console",
	"moduleList"=>$moduleList,
	"appDir"=>"app",
	"rootDir"=>__DIR__
);
{{/if}}

$console = new Console($configs);

{{if pkg_do}}
$console->addCmdSect("\nDoctrine");
$console->add(new GenerateModelsCommand());
$console->add(new GenerateMigrationCommand());
$console->add(new GenerateSeederCommand());
$console->add(new MigrateExecCommand());
$console->add(new SeederExecCommand());
$console->add(new SqlExecCommand());
{{/if}}

{{if pkg_auth}}
$console->addCmdSect("\nAuth");
$console->add(new PermissionAddCommand());
$console->add(new RoleAddCommand());
$console->add(new RoleAddPermissionCommand());
$console->add(new UserAddCommand());
$console->add(new UserDumpCredentialsCommand());
$console->add(new UserResetPasswordCommand());
{{/if}}

{{if pkg_books}}
$console->addCmdSect("\nAcounts");
$console->add(new BooksShellCommand);
{{/if}}

exit($console->run($_SERVER["argv"]));');

Strukt\Fs::touchWrite("tpl/sgf/index.sgf",'<?php

require "bootstrap.php";

use Strukt\Http\Response;
use Strukt\Http\Request;
use Strukt\Http\RedirectResponse;
use Strukt\Http\Session;

use Strukt\Router\Middleware\ExceptionHandler;
use Strukt\Router\Middleware\Authentication; 
use Strukt\Router\Middleware\Authorization;
use Strukt\Router\Middleware\StaticFileFinder;
use Strukt\Router\Middleware\Session as SessionMiddleware;
use Strukt\Router\Middleware\Router as RouterMiddleware;

use Strukt\Framework\Provider\Validator as ValidatorProvider;
use Strukt\Framework\Provider\Annotation as AnnotationProvider;
use Strukt\Framework\Provider\Router as RouterProvider;

{{if pkg_do}}
use App\Provider\Logger as LoggerProvider;
use App\Provider\EntityManager as EntityManagerProvider;
use App\Provider\EntityManagerAdapter as EntityManagerAdapterProvider;
use App\Provider\Normalizer as NormalizerProvider;
use Cobaia\Doctrine\MonologSQLLogger;
{{/if}}

{{if pkg_audit}}
use App\Middleware\Audit as AuditMiddleware;
{{/if}}

use Strukt\Event\Event;
use Strukt\Env;

Env::set("root_dir", getcwd());
Env::set("rel_app_ini", "/cfg/app.ini");
Env::set("rel_static_dir", "/public/static");
Env::set("rel_mod_ini", "/cfg/module.ini");
Env::set("is_dev", true);

{{if pkg_do}}
Env::set("rel_appsrc_dir", "app/src/");
Env::set("rel_db_ini", "cfg/db.ini");
Env::set("logger_name", "Strukt Logger");
Env::set("logger_file", "logs/app.log");
{{/if}}

$kernel = new Strukt\Router\Kernel(Request::createFromGlobals());
$kernel->inject("app.dep.author", function(){

	return array(

		"permissions" => array(

			// "show_secrets"
			// "user_all"
		)
	);
});

{{if pkg_do}}
$kernel->inject("app.dep.logger.sqllogger", function(){

	return new MonologSQLLogger(null, null, __DIR__ . \'/logs/\');
});
{{/if}}

{{if pkg_roles}}
$kernel->inject("app.dep.author", function(Session $session){

	if($session->has("username")){

		$userC = new __APP__\AuthModule\Controller\User;
		$permissions = $userC->findPermissionsByUsername($session->get("username"));

		return $permissions;
	}

	return array();
});
{{/if}}

/**/ //strukt-strukt//
$kernel->inject("app.dep.authentic", function(Session $session){

	$user = new Strukt\User();
	$user->setUsername($session->get("username"));

	return $user;
});
/**/ //strukt-strukt//

$kernel->inject("app.dep.session", function(){

	return new Session;
});

$kernel->providers(array(

	ValidatorProvider::class,
	AnnotationProvider::class,
	RouterProvider::class

	{{if pkg_do}}
	LoggerProvider::class,
	EntityManagerProvider::class,
	EntityManagerAdapterProvider::class,
	NormalizerProvider::class
	{{/if}}
));

$kernel->middlewares(array(
	
	ExceptionHandler::class,
	SessionMiddleware::class,
	Authorization::class,
	Authentication::class,
	StaticFileFinder::class,
	{{if pkg_audit}}
	AuditMiddleware::class,
	{{/if}}
	RouterMiddleware::class
));

$loader = new App\Loader($kernel);
$app = $loader->getApp(); 
$app->runDebug();');